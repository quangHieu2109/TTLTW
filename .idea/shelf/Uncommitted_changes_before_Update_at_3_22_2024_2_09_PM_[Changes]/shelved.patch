Index: Web/src/main/java/model/IModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;public interface IModel {\r\n}\r\n
===================================================================
diff --git a/Web/src/main/java/model/IModel.java b/Web/src/main/java/model/IModel.java
--- a/Web/src/main/java/model/IModel.java	
+++ b/Web/src/main/java/model/IModel.java	
@@ -1,2 +1,7 @@
-package model;public interface IModel {
+package model;
+
+public interface IModel {
+    void insert();
+    void update();
+    void delete();
 }
Index: Web/src/main/java/model/AbsModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;public class AbsModel {\r\n}\r\n
===================================================================
diff --git a/Web/src/main/java/model/AbsModel.java b/Web/src/main/java/model/AbsModel.java
--- a/Web/src/main/java/model/AbsModel.java	
+++ b/Web/src/main/java/model/AbsModel.java	
@@ -1,2 +1,18 @@
-package model;public class AbsModel {
+package model;
+
+public abstract class AbsModel implements IModel{
+    @Override
+    public void insert() {
+
+    }
+
+    @Override
+    public void delete() {
+
+    }
+
+    @Override
+    public void update() {
+
+    }
 }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$/Web\" />\r\n  </component>\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/Web/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"21\" project-jdk-type=\"JavaSDK\" />\r\n</project>
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -10,6 +10,7 @@
         <option value="$PROJECT_DIR$/Web/pom.xml" />
       </list>
     </option>
+    <option name="workspaceImportForciblyTurnedOn" value="true" />
   </component>
   <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="21" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"\" vcs=\"Git\" />\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	
+++ b/.idea/vcs.xml	
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: Web/src/main/java/model/Log.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;public class Log {\r\n}\r\n
===================================================================
diff --git a/Web/src/main/java/model/Log.java b/Web/src/main/java/model/Log.java
--- a/Web/src/main/java/model/Log.java	
+++ b/Web/src/main/java/model/Log.java	
@@ -1,2 +1,178 @@
-package model;public class Log {
-}
+package model;
+
+import database.JDBCUtil;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.Timestamp;
+import java.util.Calendar;
+import java.util.Random;
+
+public class Log implements IModel{
+    private String id;
+    private int level;
+    private String ip;
+    private String national;
+    private String address;
+    private String preValue;
+    private String curValue;
+    private Timestamp creDate;
+    private Timestamp upDate;
+
+    public Log(String id, int level, String ip, String national, String address, String preValue, String curValue, Timestamp creDate, Timestamp upDate) {
+        this.id = id;
+        this.level = level;
+        this.ip = ip;
+        this.national = national;
+        this.address = address;
+        this.preValue = preValue;
+        this.curValue = curValue;
+        this.creDate = creDate;
+        this.upDate = upDate;
+
+    }
+
+    public Log(int level, String ip, String national, String address, String preValue, String curValue, Timestamp creDate) {
+        Random rd = new Random();
+        int c = 65 + rd.nextInt(25);
+        String id = (char) c + "" + System.currentTimeMillis();
+        this.id = id;
+        this.level = level;
+        this.ip = ip;
+        this.national = national;
+        this.address = address;
+        this.preValue = preValue;
+        this.curValue = curValue;
+        this.creDate = creDate;
+        this.upDate = new Timestamp(Calendar.getInstance().getTimeInMillis());;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public int getLevel() {
+        return level;
+    }
+
+    public void setLevel(int level) {
+        this.level = level;
+    }
+
+    public String getIp() {
+        return ip;
+    }
+
+    public void setIp(String ip) {
+        this.ip = ip;
+    }
+
+    public String getNational() {
+        return national;
+    }
+
+    public void setNational(String national) {
+        this.national = national;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public String getPreValue() {
+        return preValue;
+    }
+
+    public void setPreValue(String preValue) {
+        this.preValue = preValue;
+    }
+
+    public String getCurValue() {
+        return curValue;
+    }
+
+    public void setCurValue(String curValue) {
+        this.curValue = curValue;
+    }
+
+    public Timestamp getCreDate() {
+        return creDate;
+    }
+
+    public void setCreDate(Timestamp creDate) {
+        this.creDate = creDate;
+    }
+
+    public Timestamp getUpDate() {
+        return upDate;
+    }
+
+    public void setUpDate(Timestamp upDate) {
+        this.upDate = upDate;
+    }
+
+    @Override
+    public String toString() {
+        return "Log{" +
+                "id='" + id + '\'' +
+                ", level=" + level +
+                ", ip='" + ip + '\'' +
+                ", national='" + national + '\'' +
+                ", address='" + address + '\'' +
+                ", preValue='" + preValue + '\'' +
+                ", curValue='" + curValue + '\'' +
+                ", creDate=" + creDate +
+                ", upDate=" + upDate +
+                '}';
+    }
+
+    @Override
+    public void insert() {
+        Connection conn = JDBCUtil.getConnection();
+        try {
+            String sql = "insert into Log (id, level, ip, national, address, preValue, curValue, creDate, upDate) values(?,?,?,?,?,?,?,?,?);";
+            PreparedStatement st = conn.prepareStatement(sql);
+            st.setString(1,this.getId());
+            st.setInt(2,this.getLevel());
+            st.setString(3,this.getIp());
+            st.setString(4,this.getNational());
+            st.setString(5,this.getAddress());
+            st.setString(6,this.getPreValue());
+            st.setString(7,this.getCurValue());
+            st.setTimestamp(8,this.getCreDate());
+            st.setTimestamp(9,this.getUpDate());
+            st.close();
+//			conn.close();
+        } catch (Exception e) {
+            // TODO: handle exception
+        }
+    }
+
+    @Override
+    public void delete() {
+        Connection conn = JDBCUtil.getConnection();
+        try {
+            String sql = "delete from Log where id = ?";
+            PreparedStatement st = conn.prepareStatement(sql);
+            st.setString(1, this.getId());
+            st.executeUpdate();
+            st.close();
+//			conn.close();
+        } catch (Exception e) {
+            // TODO: handle exception
+        }
+    }
+
+    @Override
+    public void update() {
+
+    }
+}
\ No newline at end of file
